{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"oko1",
				"oko1_init"
			],
			[
				"Zbu",
				"ZbudujOko"
			],
			[
				"is",
				"i_stream"
			],
			[
				"clear",
				"clearScrean"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lab1/Makefile",
			"settings":
			{
				"buffer_size": 2047,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*+- SVN Keywords ----------------------------------------------------+\n *|                                                                   |\n *| $HeadURL:: $                                                      |\n *|     $Rev::                                                      $:|\n *|    $Date::                                                      $:|\n *|  $Author::                                                      $:|\n *|                                                                   |\n *+-------------------------------------------------------------------+\n */\n\n#include <iostream>\n#include <iomanip>\n#include <fstream\n#include <vector>\n#include \"lacze_do_gnuplota.hh\"\n#include \"Wektor2D.hh\"\n\nusing namespace std;\n\n\n/*!\n * \\brief Zapisuje do strumienia współrzędne punktów\n *\n *  Zapisuje do strumienia wyjściowego współrzędne zbioru punktów\n *  dostępnych poprzez parametr \\e ZbPunktow. Współrzędne każdego\n *  z punktów zapisane są w osobnych liniach, np.\n *  zbiór trzech punktów o współrzędnych (10,22), (20,33), (30,44)\n *  zostaną zapisane w następującej postaci\n    \\verbatim\n      10 22\n      20 33\n      30 44\n    \\verbatimend\n *  Zapisana współrzędna y-owa każdego może być zmodyfikowana poprzez\n *  dodanie wartości przekazanej przez parametr \\e TransY.\n * \n *  \\param[in]  ZbPunktow - zbior punktów, których współrzędne mają\n *                          mają zostać zapisane do strumienia wyjściowego.\n *  \\param[in,out] StrmWy - strumień wyjściowy, do którego zostają zapisane\n *                          współrzędne poszczególnych punktów. \n *  \\param[in]  TransY - przesunięcie współrzędnej y-owej. Wartość dostępna\n *                       poprzez ten parametr jest dodawana do zapisywanej\n *                       wartości współrzędnej y-owej.\n *\n *  \\retval true - jeśli operacja powiodła się.\n *  \\retval false - w przypadku przeciwnym.\n */\nbool Zapisz( const vector<Wektor2D>& ZbPunktow, ostream&  StrmWy, double TransY = 0 )\n{\n  for (auto Elem : ZbPunktow) {\n    Elem.y += TransY;\n    StrmWy << Elem << endl;\n  }\n  return !StrmWy.fail();\n}\n\n\n\n\n/*!\n *  Funkcja tworzy łamaną, która ma reprezentować \n *  zarys ust. Współrzędne poszczególnych wierzchołków\n *  łamanej zapisywane są do pliku o podanej przez parametr nazwie.\n *  \\param[in] sNazwaPliku - nazwa pliku, do którego mają zostać zapisane\n *                           współrzędne punktów.\n *  \\post Zostaje utworzony plik w którym zapisane zostają współrzędne\n *        wierzchołków reprezentujących górną i dolną wargę. \n *        Współrzędne obu łamanych są w pliku oddzielone jedną wolną linią.\n *\n *  \\retval true - jeśli operacja powiodła się.\n *  \\retval false - w przypadku przeciwnym.\n */\nbool ZbudujUsta(const char *sNazwaPliku)\n{\n  ofstream  StrmWy(sNazwaPliku);\n\n  if (!StrmWy.is_open()) return false;\n\n  vector<Wektor2D>  GornaWarga = { {-20,0}, {-5,10}, {0,5}, {5,10}, {20,0} };\n  vector<Wektor2D>  DolnaWarga = { {-20,0}, {0,-10}, {20,0} };\n\n\n  if (!Zapisz(GornaWarga,StrmWy)) return false;\n  StrmWy << endl;\n  if (!Zapisz(DolnaWarga,StrmWy)) return false;\n  return true;\n}\n\n\n\n\n\n/*!\n *  Funkcja tworzy łamaną, która ma reprezentować \n *  zarys oka. Współrzędne poszczególnych wierzchołków\n *  łamanej zapisywane są do pliku o podanej przez parametr nazwie.\n *  \\param[in] sNazwaPliku - nazwa pliku, do którego mają zostać zapisane\n *                           współrzędne punktów.\n *  \\post Zostaje utworzony plik w którym zapisane zostają współrzędne\n *        wierzchołków reprezentujących górną i dolną powiekę. \n *        Współrzędne obu łamanych są w pliku oddzielone jedną wolną linią.\n *\n *  \\retval true - jeśli operacja powiodła się.\n *  \\retval false - w przypadku przeciwnym.\n */\nbool ZbudujOko(const char *sNazwaPliku)\n{\n  ofstream  StrmWy(sNazwaPliku);\n\n  if (!StrmWy.is_open()) return false;\n\n  vector<Wektor2D>  GornaPowieka = { {-12,0}, {-5,5}, {5,5}, {12,0} };\n  vector<Wektor2D>  DolnaPowieka = { {-12,0}, {-5,-5}, {5,-5}, {12,0} };\n\n\n  if (!Zapisz(GornaPowieka,StrmWy,30)) return false;\n  StrmWy << endl;\n  if (!Zapisz(DolnaPowieka,StrmWy,30)) return false;\n  return true;\n}\n\n\n\nint main() \n{\n  char  Opcja;\n  PzG::LaczeDoGNUPlota  Lacze;\n\n\n  ZbudujUsta(\"usta.dat\");\n  ZbudujOko(\"oko.dat\");\n  Lacze.DodajNazwePliku(\"usta.dat\",PzG::RR_Ciagly,6);\n  Lacze.DodajNazwePliku(\"oko.dat\",PzG::RR_Ciagly,6);\n  Lacze.Inicjalizuj();  // Tutaj startuje gnuplot.\n  Lacze.ZmienTrybRys(PzG::TR_2D);\n\n  Lacze.UstawZakresY(-15,40);\n  Lacze.UstawZakresX(-35,40);\n  Lacze.Rysuj(); \n   \n  cout << \"Aby zakonczyc nacisnij ENTER ...\" << flush;\n  cin >> noskipws >> Opcja;\n}\n",
			"file": "/home/pawel/Desktop/zad1/src/main.cpp",
			"file_size": 4727,
			"file_write_time": 130578336226458419,
			"settings":
			{
				"buffer_size": 4579,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lab1/src/main.cpp",
			"settings":
			{
				"buffer_size": 7888,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lab1/wejscie",
			"settings":
			{
				"buffer_size": 624,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 152.0,
		"selected_items":
		[
			[
				"make",
				"Set Syntax: Makefile"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/pawel/Desktop/Git/zamp/lab1",
		"/home/pawel/Desktop/Git/zamp/lab1/libs",
		"/home/pawel/Desktop/Git/zamp/lab1/src"
	],
	"file_history":
	[
		"/media/pawel/MYLINUXLIVE/lab1/src/main.cpp",
		"/home/pawel/Desktop/Git/zamp/lab1/src/plik",
		"/media/usb0/Ubuntu-29.09.2014/catkin_ws/src/czlapacz1/src/talker.cpp",
		"/media/usb0/Ubuntu-29.09.2014/catkin_ws/src/czlapacz1/src/czlapacz_node.cpp",
		"/media/usb0/Ubuntu-29.09.2014/catkin_ws/src/czlapacz1/src/moja.cpp",
		"/home/pawel/Desktop/Git/zamp/lab1/unix/Makefile"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"processFile"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lab1/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2047,
						"regions":
						{
						},
						"selection":
						[
							[
								1124,
								1124
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/pawel/Desktop/zad1/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4579,
						"regions":
						{
						},
						"selection":
						[
							[
								619,
								619
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lab1/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7888,
						"regions":
						{
						},
						"selection":
						[
							[
								666,
								666
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lab1/wejscie",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 624,
						"regions":
						{
						},
						"selection":
						[
							[
								263,
								263
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "zamp.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 176.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
